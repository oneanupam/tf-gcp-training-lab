name: GitOps Workflow
on:
  workflow_dispatch:
    inputs:
      working-dir:
        description: 'the sub-project working directory'
        required: true
defaults:
  run:
    working-directory: ./tf-outputs/
env:
  TERRAFORM_VER: 1.12.0
  TERRAFORM_DIR: "./tf-outputs/"
  CLOUDSDK_VER: 522.0.0
permissions:
  pull-requests: write
jobs:
  infrastructure-provisioning:
    name: Infrastructure Provisioning Job
    runs-on: ubuntu-latest
    permissions:
        contents: read
        id-token: write
        pull-requests: write
    steps:
      # Checkout the repository code
      - name: Code checkout
        id: code_checkout
        uses: actions/checkout@v4

      # Scan the repo for any sensitive information like secrets etc
      - name: Secret Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./ # Code repository path
          base: ""
          head: ${{ github.head_ref || github.ref_name }} # First one shows PR source branch and second push branch
          extra_args: --results=verified,unknown

      # Static code analysis using aqua security's tfsec
      - name: Run tfsec scan
        id: static_code_analysis
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: ${{ github.event.inputs.working-dir }}
          additional_args: --tfvars-file terraform.tfvars --minimum-severity HIGH

      # Install the latest version of Google Cloud SDK
      - id: cloud_sdk_installation
        name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          version: ${{ env.CLOUDSDK_VER }}

      # Setup the authentication for the Google Cloud using WIF
      - id: gcp_auth
        name: Authenticate to GCP
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_ID }}

      # Install the specified version of Terraform CLI
      - id: tf_installation
        name: Terraform Installation
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VER }}

      # Checks that Terraform configuration files adhere to a canonical format
      - name: Terraform fmt
        id: tf_fmt
        run: terraform fmt -check

      # Initialize the Terraform working directory
      - name: Terraform Init
        id: tf_init
        run: terraform init

      # Validate the terraform configuration files
      - name: Terraform Validate
        id: tf_validate
        run: terraform validate -no-color

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        id: tf_plan
        run: terraform plan -no-color

      # Comments the terraform plan output on pull request
      - id: comment_output
        name: Comment Terraform Plan Output
        uses: actions/github-script@v7
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.tf_fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.tf_init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.tf_validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            please see the stage output for more details.
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.tf_plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            please see the stage output for more details.
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ github.event.inputs.working-dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
            })

      # Executes the apply operation to deploy the actual infrastructure
      # - name: Terraform Apply
      #   id: tf_apply
      #   if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      #   run: terraform apply -auto-approve

      - name: Notify success
        if: success() # this step runs only if the previous steps succeeded.
        run: echo "[SUCCESS] The build is successful without any errors."

      - name: Notify failure
        if: failure() # this step runs only if any of the previous steps failed.
        run: |
          echo "[FAILED] This job has been failed due to earlier errors."
          echo "An eamil notification can be setup later sometime."
